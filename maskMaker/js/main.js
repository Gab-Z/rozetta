var positions = [65.1591,387.9813,-223.8107,87.0021,407.2313,-230.6157,71.3671,428.7513,-250.1738,64.0751,476.2413,-264.8557,13.901,326.5113,-96.1422,-1.182,320.0414,-101.1727,39.25,351.1313,-108.3267,-161.45,370.0414,-129.4187,-221.6739,384.1513,-118.8167,-226.0399,398.9713,-119.7037,26.223,320.2713,-189.1877,51.446,334.1313,-231.7018,29.29,340.8813,-250.4997,2.311,211.1613,-56.2384,6.938,237.3513,-70.4571,20.811,234.1913,-84.1743,33.592,278.5213,-121.8237
,28.428,271.7914,-129.2587,53.353,330.6013,-189.5287,51.831,325.0813,-175.3738,77.9221,372.9813,-214.2227,37.607,228.9513,-34.7257,71.604,278.5013,-50.1705,16.809,232.5913,-39.1411,42.595,169.6815,-71.458,21.162,165.8415,-82.0934,24.697,136.6215,-77.3101,-103.457,321.4713,-55.6252,-96.096,295.6413,-69.6524,-95.545,311.4813,-74.5705,39.561,391.2413,-300.1747,14.9481,455.7013,-352.3277,35.9481,360.0414,-269.1427,21.951,310.6714,-93.8235
,81.256,437.2513,-220.6377,82.03,480.4813,-255.0997,-9.523,236.1213,-63.4794,-13.381,224.2613,-44.0821,-0.692,275.5612,-73.0472,-91.576,273.5913,-66.3461,-63.697,283.1013,-41.1674,-61.121,241.3014,-55.6264,81.633,393.4314,-202.3008,51.343,335.8313,-165.6308,35.641,341.3613,-152.6758,52.903,363.2213,-237.0638,32.58,442.8413,-328.9388,58.7861,356.0313,-247.8507,50.579,143.3415,-54.5085,-42.556,345.6213,-216.3857,7.967,331.2013,-172.9468
,15.816,327.5514,-189.9258,63.762,400.1714,-210.3608,67.665,449.5913,-239.0337,-112.659,369.5313,-107.5118,-124.893,401.2013,-84.1137,-122.765,351.7713,-120.5727,-37.901,338.4813,-224.0887,20.689,338.4413,-195.8267,-37.058,355.8913,-219.9657,-133.705,359.1714,-116.1907,0.267,287.3413,-96.3259,-15.457,277.4113,-98.5955,8.269,460.0813,-344.8697,31.7731,362.6113,-250.3667,-101.679,332.4613,-95.7062,-41.432,221.1313,-64.6112,-46.379,220.0713,-37.9184
,-61.451,182.8213,-39.34,-72.38,274.3815,-163.201,-50.115,226.1714,-161.807,-67.381,241.1115,-131.021,-149.701,346.3513,-123.4938,-131.705,353.1913,-106.4208,-119.402,295.3014,-89.8818,-80.773,280.2914,-190.568,-72.334,280.2614,-194.676,-80.125,310.8914,-196.589,-24.296,524.8914,-372.1197,-52.215,573.7612,-358.6748,-30.286,527.9014,-360.2367,-62.781,230.0114,-172.066,-84.319,230.6315,-149.459,-50.115,226.1714,-161.807,9.449,339.6013,-136.1838
,45,367.2613,-184.6587,-67.895,303.5815,-156.009,-48.441,270.2714,-116.74,-11.912,238.1313,-33.6071,-35.418,259.7813,-28.9074,-55.626,274.8313,-54.3644,-8.906,332.4613,-131.1727,17.868,346.7513,-173.8457,155.47,44.7784,0,117.835,56.6685,-41.3106,137.683,37.1775,0,-57.64,209.4114,-97.9639,-28.687,80.0345,-75.4256,-55.688,46.3035,-69.7326,-5.762,38.9905,-49.4603,73.942,476.1913,-267.3257,-15.524,319.3713,-140.8297
,-36.4,311.6213,-93.8197,-67.725,255.5213,-70.3913,-42.295,240.8813,-61.1278,-33.196,228.6814,-20.3529,-58.11,198.6714,-10.8424,-28.367,294.0213,-106.9447,30.67,312.5213,-173.7457,52.814,338.4513,-117.0817,12.97,485.3413,-359.5587,-3.523,516.0513,-361.1548,10.631,353.0913,-289.7777,21.462,351.1714,-298.7447,114.874,460.5214,-202.0297,25.9451,351.1113,-248.4197,6.145,311.3713,-108.0357,42.233,347.4113,-118.3347,-92.109,316.7013,-47.9501
,-103.457,321.4713,-55.6252,-107.359,336.6013,-40.5049,-24.296,524.8914,-372.1197,-66.7919,535.0012,-364.0367,-30.286,527.9014,-360.2367,-11.061,210.3513,-66.1715,17.146,172.1613,-40.1262,-10.759,234.9214,-75.3639,19.132,284.2013,-121.3817,-2.457,373.4513,-316.7567,-27.123,418.2213,-346.1137,7.7801,376.1113,-320.0877,64.303,537.4812,-255.3097,7.618,302.2914,-129.0848,14.901,366.1313,-292.2017,-29.3109,382.8813,-323.8907,-157.189,353.9813,-140.0118
,-212.4459,375.0913,-134.9288,-113.928,340.8313,-93.2087,2.8141,380.0414,-334.0917,-6.895,374.6413,-332.4677,29.949,344.4013,-188.7237,24.253,435.6514,-122.7737,-64.964,191.7713,-25.3045,-92.634,299.0414,-92.6027,44.103,347.8112,-197.7308,35.5279,181.6878,0,-7.545,214.7614,0,41.584,177.8115,-43.8044,73.385,150.4815,-39.7684,100.2559,144.4978,0,-48.496,196.7713,2.6663,-92.109,316.7013,-47.9501,-99.114,365.4513,-65.7598
,-86.27,314.6413,-58.0664,7.917,220.5514,-18.4367,11.477,214.4813,-35.1081,15.606,187.4013,6.0574,-124.92,371.5813,-233.1387,-83.413,353.1913,-239.3887,-141.855,409.4013,-67.1887,-111.299,394.1213,-83.7409,126.159,112.7725,-31.5533,164.662,94.7654,0,135.316,116.9985,0,126.159,112.7725,-31.5533,158.112,49.3965,0,144.548,75.5055,-47.7908,100.267,74.1165,-45.1512,-135.725,345.4913,-135.3898,-118.885,295.1714,-104.5257
,139.155,48.8354,0,100.267,74.1165,-45.1512,100.267,74.1165,-45.1512,117.835,56.6685,-41.3106,139.155,48.8354,0,58.118,114.1575,-56.6069,126.159,112.7725,-31.5533,58.118,114.1575,-56.6069,73.385,150.4815,-39.7684,50.579,143.3415,-54.5085,73.385,150.4815,-39.7684,42.595,169.6815,-71.458,23.441,437.5214,-319.3528,0.887,298.6113,-70.7042,7.495,187.4014,-71.4058,42.595,169.6815,-71.458,7.495,187.4014,-71.4058
,-7.545,214.7614,0,-30.734,217.0815,-64.6465,-20.613,198.6614,-81.2087,-56.063,207.6015,0,-66.142,215.0615,-73.9206,7.495,187.4014,-71.4058,-20.613,198.6614,-81.2087,-22.69,168.9315,-84.095,7.495,187.4014,-71.4058,-85.579,173.6714,-59.605,-56.063,207.6015,0,-90.837,181.1614,0,-56.063,207.6015,0,-85.579,173.6714,-59.605,-66.142,215.0615,-73.9206,-106.928,131.1515,-52.6873,-90.837,181.1614,0
,-119.039,139.8815,0,-83.99,199.9715,-88.7003,-66.142,215.0615,-73.9206,-85.579,173.6714,-59.605,-50.374,147.3415,-80.5236,-106.928,131.1515,-52.6873,-72.361,105.9695,-72.5404,-67.899,178.3115,-95.3342,-85.579,173.6714,-59.605,-50.374,147.3415,-80.5236,-22.69,168.9315,-84.095,-50.374,147.3415,-80.5236,-11.957,134.8815,-83.3981,-11.957,134.8815,-83.3981,-72.361,105.9695,-72.5404,-28.687,80.0345,-75.4256,-11.957,134.8815,-83.3981
,10.724,72.9255,-70.8108,-11.957,134.8815,-83.3981,-28.687,80.0345,-75.4256,24.697,136.6215,-77.3101,10.724,72.9255,-70.8108,58.118,114.1575,-56.6069,50.579,143.3415,-54.5085,24.697,136.6215,-77.3101,58.118,114.1575,-56.6069,100.267,74.1165,-45.1512,58.118,114.1575,-56.6069,10.724,72.9255,-70.8108,-9.704,-1.6675,-41.7508,9.704,28.5495,0,-5.762,38.9905,-49.4603,100.267,74.1165,-45.1512,90.88,48.1485,0
,117.835,56.6685,-41.3106,10.724,72.9255,-70.8108,13.728,46.6145,-54.9556,100.267,74.1165,-45.1512,-5.762,38.9905,-49.4603,10.724,72.9255,-70.8108,-28.687,80.0345,-75.4256,90.88,48.1485,0,100.267,74.1165,-45.1512,20.233,40.1935,0,-5.762,38.9905,-49.4603,9.704,28.5495,0,-31.548,247.2914,-49.1766,-25.522,315.4813,-82.8247,90.88,48.1485,0,-121.542,388.9214,-79.1709,139.155,48.8354,0
,-57.64,209.4114,-97.9639,-20.613,198.6614,-81.2087,-37.002,218.8415,-96.3196,-20.613,198.6614,-81.2087,-30.734,217.0815,-64.6465,-37.002,218.8415,-96.3196,-49.819,227.7115,-85.1943,-37.002,218.8415,-96.3196,-30.734,217.0815,-64.6465,-30.734,217.0815,-64.6465,-66.142,215.0615,-73.9206,-49.819,227.7115,-85.1943,-48.441,270.2714,-116.74,-37.002,218.8415,-96.3196,-49.819,227.7115,-85.1943,-81.283,273.3815,-123.235,-58.395,274.3615,-112.455
,-93.126,250.5515,-135.96,-66.142,215.0615,-73.9206,-67.895,303.5815,-156.009,-48.441,270.2714,-116.74,-67.895,303.5815,-156.009,-67.895,303.5815,-156.009,-80.125,310.8914,-196.589,-93.126,250.5515,-135.96,116.7811,474.1913,-207.6167,-83.99,199.9715,-88.7003,-84.319,230.6315,-149.459,-52.29,189.0515,-112.658,-62.781,230.0114,-172.066,55.775,352.3513,-108.6277,-50.115,226.1714,-161.807,-62.781,230.0114,-172.066,-22.69,168.9315,-84.095
,-67.899,178.3115,-95.3342,-22.69,168.9315,-84.095,-20.613,198.6614,-81.2087,-38.318,203.0414,-110.989,-20.613,198.6614,-81.2087,-38.318,203.0414,-110.989,-20.613,198.6614,-81.2087,-33.362,170.0612,-55.1389,-24.331,171.1714,-53.8032,-45.361,176.5313,-52.6913,-92.109,316.7013,-47.9501,74.329,479.0713,-251.2177,24.187,180.2713,-20.1166,-72.361,105.9695,-72.5404,-132.126,95.5154,-53.0467,-55.688,46.3035,-69.7326,7.557,482.2714,-345.9647
,-8.949,229.4413,-23.7395,-38.318,203.0414,-110.989,11.507,303.6814,-143.2218,-58.7699,579.6414,-347.9037,20.92,181.3112,-8.8097,-80.125,310.8914,-196.589,-72.334,280.2614,-194.676,-2.569,163.8413,-53.1517,32.868,246.8513,-30.3047,86.905,302.2713,-39.9775,-132.126,95.5154,-53.0467,-119.039,139.8815,0,-157.241,95.6015,0,-92.109,316.7013,-47.9501,-80.125,310.8914,-196.589,-92.109,316.7013,-47.9501,-57.64,209.4114,-97.9639
,-55.688,46.3035,-69.7326,-9.704,-1.6675,-41.7508,-5.762,38.9905,-49.4603,-67.381,241.1115,-131.021,-67.381,241.1115,-131.021,-57.64,209.4114,-97.9639,-17.6895,192.0863,13.4885,65.1591,387.9813,223.8107,71.3671,428.7513,250.1738,87.0021,407.2313,230.6157,64.0751,476.2413,264.8557,13.901,326.5113,96.1422,39.25,351.1313,108.3267,-1.182,320.0414,101.1727,-161.45,370.0414,129.4187,-226.0399,398.9713,119.7037,-221.6739,384.1513,118.8167
,26.223,320.2713,189.1877,29.29,340.8813,250.4997,51.446,334.1313,231.7018,2.311,211.1613,56.2384,20.811,234.1913,84.1743,6.938,237.3513,70.4571,33.592,278.5213,121.8237,28.428,271.7914,129.2587,53.353,330.6013,189.5287,77.9221,372.9813,214.2227,51.831,325.0813,175.3738,37.607,228.9513,34.7257,16.809,232.5913,39.1411,71.604,278.5013,50.1705,42.595,169.6815,71.458,24.697,136.6215,77.3101,21.162,165.8415,82.0934
,-103.457,321.4713,55.6252,-95.545,311.4813,74.5705,-96.096,295.6413,69.6524,39.561,391.2413,300.1747,35.9481,360.0414,269.1427,14.9481,455.7013,352.3277,21.951,310.6714,93.8235,81.256,437.2513,220.6377,82.03,480.4813,255.0997,-9.523,236.1213,63.4794,-0.692,275.5612,73.0472,-13.381,224.2613,44.0821,-91.576,273.5913,66.3461,-61.121,241.3014,55.6264,-63.697,283.1013,41.1674,81.633,393.4314,202.3008,35.641,341.3613,152.6758
,51.343,335.8313,165.6308,52.903,363.2213,237.0638,58.7861,356.0313,247.8507,32.58,442.8413,328.9388,50.579,143.3415,54.5085,-42.556,345.6213,216.3857,15.816,327.5514,189.9258,7.967,331.2013,172.9468,63.762,400.1714,210.3608,67.665,449.5913,239.0337,-112.659,369.5313,107.5118,-122.765,351.7713,120.5727,-124.893,401.2013,84.1137,-37.901,338.4813,224.0887,-37.058,355.8913,219.9657,20.689,338.4413,195.8267,-133.705,359.1714,116.1907
,0.267,287.3413,96.3259,-15.457,277.4113,98.5955,8.269,460.0813,344.8697,31.7731,362.6113,250.3667,-101.679,332.4613,95.7062,-41.432,221.1313,64.6112,-61.451,182.8213,39.34,-46.379,220.0713,37.9184,-50.115,226.1714,161.807,-72.38,274.3815,163.201,-67.381,241.1115,131.021,-149.701,346.3513,123.4938,-119.402,295.3014,89.8818,-131.705,353.1913,106.4208,-80.773,280.2914,190.568,-80.125,310.8914,196.589,-72.334,280.2614,194.676
,-24.296,524.8914,372.1197,-30.286,527.9014,360.2367,-52.215,573.7612,358.6748,-62.781,230.0114,172.066,-50.115,226.1714,161.807,9.449,339.6013,136.1838,45,367.2613,184.6587,-67.895,303.5815,156.009,-48.441,270.2714,116.74,-11.912,238.1313,33.6071,-55.626,274.8313,54.3644,-35.418,259.7813,28.9074,-8.906,332.4613,131.1727,17.868,346.7513,173.8457,117.835,56.6685,41.3106,-57.64,209.4114,97.9639,-55.688,46.3035,69.7326
,-28.687,80.0345,75.4256,-5.762,38.9905,49.4603,73.942,476.1913,267.3257,-15.524,319.3713,140.8297,-36.4,311.6213,93.8197,-67.725,255.5213,70.3913,-42.295,240.8813,61.1278,-58.11,198.6714,10.8424,-33.196,228.6814,20.3529,30.67,312.5213,173.7457,-28.367,294.0213,106.9447,52.814,338.4513,117.0817,-3.523,516.0513,361.1548,12.97,485.3413,359.5587,10.631,353.0913,289.7777,21.462,351.1714,298.7447,114.874,460.5214,202.0297
,25.9451,351.1113,248.4197,6.145,311.3713,108.0357,42.233,347.4113,118.3347,-92.109,316.7013,47.9501,-107.359,336.6013,40.5049,-103.457,321.4713,55.6252,-24.296,524.8914,372.1197,-30.286,527.9014,360.2367,-66.7919,535.0012,364.0367,17.146,172.1613,40.1262,-11.061,210.3513,66.1715,-10.759,234.9214,75.3639,19.132,284.2013,121.3817,-2.457,373.4513,316.7567,7.7801,376.1113,320.0877,-27.123,418.2213,346.1137,64.303,537.4812,255.3097
,7.618,302.2914,129.0848,-29.3109,382.8813,323.8907,14.901,366.1313,292.2017,-157.189,353.9813,140.0118,-212.4459,375.0913,134.9288,-113.928,340.8313,93.2087,2.8141,380.0414,334.0917,-6.895,374.6413,332.4677,29.949,344.4013,188.7237,24.253,435.6514,122.7737,-64.964,191.7713,25.3045,-92.634,299.0414,92.6027,44.103,347.8112,197.7308,41.584,177.8115,43.8044,73.385,150.4815,39.7684,-48.496,196.7713,-2.6663,-92.109,316.7013,47.9501
,-86.27,314.6413,58.0664,-99.114,365.4513,65.7598,7.917,220.5514,18.4367,15.606,187.4013,-6.0574,11.477,214.4813,35.1081,-83.413,353.1913,239.3887,-124.92,371.5813,233.1387,-141.855,409.4013,67.1887,-111.299,394.1213,83.7409,126.159,112.7725,31.5533,126.159,112.7725,31.5533,144.548,75.5055,47.7908,100.267,74.1165,45.1512,-118.885,295.1714,104.5257,-135.725,345.4913,135.3898,100.267,74.1165,45.1512,100.267,74.1165,45.1512
,139.155,48.8354,0,117.835,56.6685,41.3106,126.159,112.7725,31.5533,58.118,114.1575,56.6069,58.118,114.1575,56.6069,50.579,143.3415,54.5085,73.385,150.4815,39.7684,73.385,150.4815,39.7684,42.595,169.6815,71.458,23.441,437.5214,319.3528,0.887,298.6113,70.7042,7.495,187.4014,71.4058,-7.545,214.7614,0,7.495,187.4014,71.4058,-7.545,214.7614,0,-30.734,217.0815,64.6465,-20.613,198.6614,81.2087
,-66.142,215.0615,73.9206,7.495,187.4014,71.4058,-22.69,168.9315,84.095,-20.613,198.6614,81.2087,7.495,187.4014,71.4058,-85.579,173.6714,59.605,-56.063,207.6015,0,-56.063,207.6015,0,-66.142,215.0615,73.9206,-85.579,173.6714,59.605,-106.928,131.1515,52.6873,-90.837,181.1614,0,-85.579,173.6714,59.605,-83.99,199.9715,88.7003,-85.579,173.6714,59.605,-66.142,215.0615,73.9206,-50.374,147.3415,80.5236
,-106.928,131.1515,52.6873,-85.579,173.6714,59.605,-67.899,178.3115,95.3342,-85.579,173.6714,59.605,-83.99,199.9715,88.7003,-50.374,147.3415,80.5236,-22.69,168.9315,84.095,-11.957,134.8815,83.3981,-11.957,134.8815,83.3981,-72.361,105.9695,72.5404,-50.374,147.3415,80.5236,-11.957,134.8815,83.3981,-11.957,134.8815,83.3981,10.724,72.9255,70.8108,-28.687,80.0345,75.4256,24.697,136.6215,77.3101,58.118,114.1575,56.6069
,10.724,72.9255,70.8108,50.579,143.3415,54.5085,58.118,114.1575,56.6069,24.697,136.6215,77.3101,100.267,74.1165,45.1512,10.724,72.9255,70.8108,58.118,114.1575,56.6069,-9.704,-1.6675,41.7508,-5.762,38.9905,49.4603,100.267,74.1165,45.1512,117.835,56.6685,41.3106,10.724,72.9255,70.8108,100.267,74.1165,45.1512,13.728,46.6145,54.9556,10.724,72.9255,70.8108,-5.762,38.9905,49.4603,-28.687,80.0345,75.4256
,90.88,48.1485,0,100.267,74.1165,45.1512,-5.762,38.9905,49.4603,9.704,28.5495,0,-25.522,315.4813,82.8247,-31.548,247.2914,49.1766,90.88,48.1485,0,-121.542,388.9214,79.1709,139.155,48.8354,0,-57.64,209.4114,97.9639,-37.002,218.8415,96.3196,-20.613,198.6614,81.2087,-20.613,198.6614,81.2087,-37.002,218.8415,96.3196,-30.734,217.0815,64.6465,-49.819,227.7115,85.1943,-30.734,217.0815,64.6465
,-37.002,218.8415,96.3196,-30.734,217.0815,64.6465,-49.819,227.7115,85.1943,-66.142,215.0615,73.9206,-48.441,270.2714,116.74,-37.002,218.8415,96.3196,-49.819,227.7115,85.1943,-81.283,273.3815,123.235,-66.142,215.0615,73.9206,-66.142,215.0615,73.9206,-93.126,250.5515,135.96,-58.395,274.3615,112.455,-48.441,270.2714,116.74,-67.895,303.5815,156.009,-67.895,303.5815,156.009,-67.895,303.5815,156.009,-93.126,250.5515,135.96
,-80.125,310.8914,196.589,116.7811,474.1913,207.6167,-83.99,199.9715,88.7003,-84.319,230.6315,149.459,-84.319,230.6315,149.459,-52.29,189.0515,112.658,-67.899,178.3115,95.3342,55.775,352.3513,108.6277,-50.115,226.1714,161.807,-38.318,203.0414,110.989,-22.69,168.9315,84.095,-67.899,178.3115,95.3342,-22.69,168.9315,84.095,-20.613,198.6614,81.2087,-20.613,198.6614,81.2087,-20.613,198.6614,81.2087,-38.318,203.0414,110.989
,-33.362,170.0612,55.1389,-45.361,176.5313,52.6913,-24.331,171.1714,53.8032,-92.109,316.7013,47.9501,74.329,479.0713,251.2177,24.187,180.2713,20.1166,-132.126,95.5154,53.0467,-72.361,105.9695,72.5404,-55.688,46.3035,69.7326,7.557,482.2714,345.9647,-8.949,229.4413,23.7395,-38.318,203.0414,110.989,11.507,303.6814,143.2218,-58.7699,579.6414,347.9037,20.92,181.3112,8.8097,-80.125,310.8914,196.589,-72.334,280.2614,194.676
,-2.569,163.8413,53.1517,32.868,246.8513,30.3047,86.905,302.2713,39.9775,-119.039,139.8815,0,-132.126,95.5154,53.0467,-92.109,316.7013,47.9501,-80.125,310.8914,196.589,-92.109,316.7013,47.9501,-57.64,209.4114,97.9639,-55.688,46.3035,69.7326,-5.762,38.9905,49.4603,-9.704,-1.6675,41.7508,-67.381,241.1115,131.021,-67.381,241.1115,131.021,-57.64,209.4114,97.9639,-17.6895,192.0863,-13.4885,-72.334,280.2614,-194.676
,-72.361,105.9695,-72.5404,126.159,112.7725,-31.5533,135.316,116.9985,0,100.267,74.1165,-45.1512,126.159,112.7725,-31.5533,-7.545,214.7614,0,-7.545,214.7614,0,-85.579,173.6714,-59.605,-90.837,181.1614,0,-85.579,173.6714,-59.605,-106.928,131.1515,-52.6873,-83.99,199.9715,-88.7003,-85.579,173.6714,-59.605,-22.69,168.9315,-84.095,-67.899,178.3115,-95.3342,-50.374,147.3415,-80.5236,-11.957,134.8815,-83.3981
,-50.374,147.3415,-80.5236,-72.361,105.9695,-72.5404,-11.957,134.8815,-83.3981,24.697,136.6215,-77.3101,-11.957,134.8815,-83.3981,0,0,0,-5.762,38.9905,-49.4603,10.724,72.9255,-70.8108,90.88,48.1485,0,-5.762,38.9905,-49.4603,-48.441,270.2714,-116.74,-49.819,227.7115,-85.1943,-66.142,215.0615,-73.9206,-66.142,215.0615,-73.9206,-67.895,303.5815,-156.009,-80.125,310.8914,-196.589,-93.126,250.5515,-135.96
,-93.126,250.5515,-135.96,-83.99,199.9715,-88.7003,-84.319,230.6315,-149.459,-67.899,178.3115,-95.3342,-50.115,226.1714,-161.807,-72.361,105.9695,-72.5404,-106.928,131.1515,-52.6873,-132.126,95.5154,-53.0467,-106.928,131.1515,-52.6873,-119.039,139.8815,0,-72.334,280.2614,194.676,-72.361,105.9695,72.5404,135.316,116.9985,0,126.159,112.7725,31.5533,126.159,112.7725,31.5533,100.267,74.1165,45.1512,42.595,169.6815,71.458
,-7.545,214.7614,0,-90.837,181.1614,0,-72.361,105.9695,72.5404,-106.928,131.1515,52.6873,-50.374,147.3415,80.5236,-85.579,173.6714,59.605,-50.374,147.3415,80.5236,-67.899,178.3115,95.3342,-22.69,168.9315,84.095,-11.957,134.8815,83.3981,-28.687,80.0345,75.4256,-11.957,134.8815,83.3981,-11.957,134.8815,83.3981,24.697,136.6215,77.3101,10.724,72.9255,70.8108,-5.762,38.9905,49.4603,90.88,48.1485,0
,-5.762,38.9905,49.4603,-48.441,270.2714,116.74,-49.819,227.7115,85.1943,-66.142,215.0615,73.9206,-67.895,303.5815,156.009,-80.125,310.8914,196.589,-93.126,250.5515,135.96,-83.99,199.9715,88.7003,-93.126,250.5515,135.96,-84.319,230.6315,149.459,-62.781,230.0114,172.066,-62.781,230.0114,172.066,-50.115,226.1714,161.807,-106.928,131.1515,52.6873,-72.361,105.9695,72.5404,-119.039,139.8815,0,-106.928,131.1515,52.6873
,-132.126,95.5154,53.0467];

var indices = [0,1,2,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,4,6,33,34,35,1,36,37,38,39,40,41,42,43
,44,45,46,47,48,24,26,49,50,51,52,53,34,54,55,56,57,58,59,56,60,7,61,62,36,58,51,10,63,64,32,65,29,28,66,67,68,69,70,71,72,73,74,75,76,77,51,57,49,78
,79,80,81,75,82,76,81,83,47,46,30,84,85,44,86,69,87,88,89,90,91,50,92,93,94,95,71,70,96,97,98,99,100,1,35,31,78,63,101,91,102,103,41,104,67,105,106,10,107,108
,109,61,33,78,110,111,112,12,113,114,1,20,115,12,112,116,117,5,118,119,120,121,122,123,13,124,125,126,127,14,128,129,130,3,100,131,58,10,115,132,108,107,128,133,134,32,11,30,41,105
,67,135,136,72,39,27,40,137,65,28,137,28,74,52,34,114,138,139,113,64,140,115,141,6,117,142,68,67,29,65,143,1,0,20,144,140,45,39,41,74,145,146,147,145,148,149,150,106,105,138
,113,130,151,152,153,117,116,109,154,155,156,59,157,158,100,2,1,133,115,112,159,55,160,161,162,163,164,149,148,117,6,5,92,84,91,132,107,62,165,162,166,155,21,23,162,161,166,166,161,167
,103,168,169,170,166,171,172,173,174,109,141,117,175,176,148,177,178,179,103,143,168,48,180,24,147,181,148,63,182,64,183,38,37,130,113,32,147,184,185,113,128,134,186,25,24,46,110,31,187,188
,184,189,184,188,188,190,191,192,193,194,194,25,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,25,220,26,59,92,49,221,222,223,224,225,226,32
,31,63,227,228,229,56,7,168,89,105,40,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,240,245,246,247,248,249,46,182,111,183,250,251,95,94,252,56,168,143,65,137,253,37,250,183
,103,90,143,19,132,43,94,93,254,182,46,45,255,256,257,258,259,260,261,262,263,90,89,153,264,265,266,261,267,268,269,270,271,85,92,144,272,273,205,116,43,132,271,274,275,271,270,276,277,272
,278,110,78,31,75,279,82,57,51,58,1,280,34,50,101,10,66,126,107,82,281,211,282,283,284,285,6,141,283,286,287,4,251,5,116,44,43,288,283,289,290,291,283,292,283,293,96,294,295,54
,65,160,296,297,298,40,299,153,116,84,44,139,129,128,43,42,19,102,251,104,140,144,92,133,128,130,131,300,3,89,40,153,38,183,33,115,133,32,285,33,6,155,13,301,183,251,4,27,39,28
,135,7,136,31,30,46,111,79,78,19,108,132,115,140,58,302,303,304,144,0,85,138,130,129,100,35,131,112,113,134,52,42,85,9,8,136,305,63,80,109,285,141,53,52,3,33,183,4,45,64
,182,110,46,111,134,133,112,55,73,60,105,89,306,306,88,23,11,47,30,89,88,306,37,88,250,34,280,114,305,182,63,68,298,66,55,159,253,36,14,37,14,13,37,88,37,23,307,96,70,23
,37,155,37,13,155,3,2,100,33,61,38,127,308,16,152,29,153,124,126,66,80,79,309,104,67,66,20,19,42,29,152,27,157,59,49,144,18,0,1,114,280,104,250,103,169,74,41,310,155,301
,106,142,67,250,104,251,126,14,36,311,312,69,54,56,143,313,124,297,124,66,297,55,54,160,74,73,137,52,85,0,57,157,49,20,42,114,50,49,92,35,34,300,88,90,250,14,16,15,314,306
,23,61,36,38,72,136,8,18,144,47,45,47,144,73,253,137,32,113,11,74,28,39,116,132,61,60,73,72,73,55,253,5,84,116,16,14,127,169,168,135,10,51,50,21,315,22,18,47,11,19
,11,108,64,45,140,19,18,11,285,109,33,316,317,318,129,139,138,104,107,102,107,10,101,319,40,27,309,111,80,250,90,103,66,298,297,310,156,155,42,52,114,158,157,57,154,315,21,69,86,320
,32,64,115,90,153,29,125,301,13,0,3,52,321,27,152,308,127,17,257,87,322,139,128,113,251,102,91,251,91,5,62,61,132,300,53,3,41,103,169,133,130,32,23,315,314,315,23,22,92,59
,140,323,324,325,315,154,314,313,125,124,11,113,12,253,159,160,158,57,59,66,107,104,140,59,58,61,109,116,84,5,91,131,35,300,124,15,17,12,115,10,308,17,16,20,0,18,154,21,155,34
,53,300,60,56,55,17,127,124,80,63,78,54,143,65,253,160,65,309,79,111,143,90,29,326,87,69,42,44,85,80,111,305,92,85,84,126,36,62,126,124,127,169,135,72,11,10,108,101,50,91
,105,41,40,62,107,126,306,314,154,327,328,87,135,168,7,7,9,136,15,124,13,305,111,182,72,74,169,60,8,7,67,104,41,102,107,101,60,72,8,154,329,306,329,105,306,330,331,332,330,333
,331,334,335,336,337,338,339,340,341,342,343,344,345,346,344,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,334,363,335,364,332,365,366,367,368,369,370,371,372,373,374,375,376,377,378
,355,354,379,380,381,382,364,383,384,385,386,387,388,389,385,337,390,391,366,392,389,340,380,393,361,394,395,359,358,396,397,398,399,400,401,402,403,404,405,406,407,380,379,387,408,409,410,411,405,407
,407,412,411,376,360,377,413,373,414,415,416,400,417,418,419,420,421,381,93,95,422,401,423,399,424,425,426,427,365,332,362,393,408,428,429,420,430,431,370,398,432,433,340,434,435,436,363,391,408,437
,438,439,440,341,441,349,332,442,439,341,443,336,444,445,446,447,448,449,450,343,451,452,453,345,454,455,456,457,333,458,427,389,442,340,459,435,434,455,460,461,361,360,342,370,398,433,462,402,463,369
,371,357,464,359,395,464,403,359,382,441,364,465,440,466,394,442,467,468,444,335,469,398,397,358,470,395,332,349,330,471,375,467,369,403,370,145,472,146,145,473,472,474,433,432,465,456,440,475,476,477
,444,436,443,478,479,480,388,481,482,427,332,331,461,439,442,483,484,386,485,163,162,149,486,473,444,336,335,421,420,413,459,392,435,165,487,162,480,352,351,162,487,485,487,488,485,430,489,490,487,170
,491,492,493,494,436,444,468,495,496,473,497,498,499,430,490,470,378,354,500,472,473,501,393,394,502,503,368,367,456,361,440,472,504,505,440,460,455,506,354,356,377,362,438,507,504,508,509,508,504,190
,508,510,511,512,513,512,514,356,515,198,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,356,355,388,379,421,539,540,541,542,543,544,361,393,362,545,546,547
,385,490,337,419,371,433,548,549,550,234,551,552,553,554,237,555,556,557,558,559,560,561,557,562,563,247,564,377,437,502,503,565,566,95,567,422,385,470,490,395,568,464,368,503,566,430,470,418,350,374
,459,422,569,93,502,375,377,570,571,572,573,574,575,576,577,578,418,476,419,579,580,581,582,576,583,584,585,586,414,471,421,587,588,523,443,459,374,589,590,591,589,592,585,593,588,585,438,362,408,405
,594,595,387,389,380,332,364,596,381,340,428,396,435,453,597,598,529,599,600,601,602,468,335,600,603,604,334,336,565,443,374,373,605,606,600,607,600,608,604,609,600,423,610,611,384,484,395,612,613,614
,371,476,615,443,373,413,466,455,457,374,350,372,429,431,565,467,421,471,461,456,455,458,333,616,419,476,371,367,363,503,442,361,461,602,335,363,480,617,343,503,334,565,357,359,369,462,463,337,362,377
,360,437,408,410,350,459,434,442,389,467,618,619,620,471,414,330,465,457,456,427,458,365,439,460,440,382,414,372,338,463,339,621,409,393,436,468,602,383,333,382,363,334,503,375,502,394,438,437,377,460
,439,461,386,390,404,433,622,419,622,352,417,342,360,376,419,622,417,368,566,417,364,441,596,621,393,502,397,396,613,386,568,483,366,368,345,345,368,343,417,352,368,623,399,423,352,480,368,368,480,343
,333,427,331,363,367,391,454,346,624,477,476,358,452,396,453,409,625,410,431,396,398,349,372,350,358,357,477,482,379,388,471,330,348,332,596,441,431,430,566,489,370,403,626,617,480,432,398,469,566,565
,431,453,366,345,627,400,628,384,470,385,629,614,452,452,614,396,386,484,384,403,464,404,382,330,414,387,379,482,349,441,372,381,421,379,365,616,364,417,566,418,345,344,346,630,352,622,391,367,366,402
,339,463,348,376,471,375,471,376,404,464,568,361,342,440,403,369,359,443,391,459,390,402,404,404,568,386,336,443,413,346,454,345,489,462,490,340,381,380,351,353,631,348,342,376,350,434,342,394,467,375
,350,342,348,602,363,436,632,633,318,457,465,466,431,429,435,435,428,340,634,357,371,625,409,437,566,430,418,396,614,613,626,480,479,372,441,382,481,387,482,478,351,631,400,635,415,361,442,394,418,358
,476,451,343,617,330,382,333,636,477,357,624,347,454,571,637,416,466,440,455,565,420,429,565,336,420,392,459,391,616,333,383,370,489,430,461,361,456,352,630,631,631,353,352,421,467,388,638,639,640,631
,630,478,629,452,451,342,341,440,568,484,483,481,388,387,396,431,435,467,389,388,391,443,436,413,420,336,458,616,365,452,347,344,341,340,442,624,346,347,349,348,330,478,480,351,364,616,383,390,386,385
,347,452,454,409,408,393,384,395,470,568,395,484,625,437,410,470,358,418,641,400,416,372,414,373,409,621,437,421,413,414,453,392,366,453,454,452,489,402,462,342,434,340,428,420,381,433,371,370,392,453
,435,622,478,630,642,416,643,462,337,490,337,463,338,344,343,452,621,502,437,402,489,403,390,337,339,398,370,431,429,428,435,390,339,402,478,644,479,433,644,622,69,645,70,81,76,75,97,646,98,145
,147,148,647,648,149,170,165,166,175,649,650,147,651,184,188,652,190,202,653,654,208,655,656,211,657,658,659,660,661,662,663,664,25,194,665,221,666,667,233,668,234,669,240,670,240,247,671,247,240,672
,261,271,673,674,675,270,272,270,676,677,270,272,75,678,679,82,680,681,682,683,283,283,292,684,685,686,303,687,688,689,154,156,329,329,150,105,399,690,400,411,598,405,424,691,425,145,149,473,149,692
,693,487,165,170,694,695,496,472,696,504,190,697,508,520,204,698,526,699,700,529,701,702,703,704,705,706,707,536,708,512,356,709,710,540,234,668,551,711,557,712,713,247,557,714,557,247,715,589,576,716
,589,585,717,585,588,718,719,588,405,598,720,721,722,598,723,724,600,600,725,726,618,727,728,729,730,731,478,622,644,433,474,644];

var edges = {};
var triangles = [];
var points = [];
var renderList = [];
var triangleIndex = 0;
var compareVec3 = function(pta,ptb){
  if( pta.x == ptb.x && pta.y == ptb.y && pta.z == ptb.z ) return true;
  return false;
}
window.onload = function(){
  var nbPoints = positions.length / 3;
  for( var i0 = 0; i0 < nbPoints; i0++ ){
    var id = i0 * 3;
    points.push( { x: positions[ id ], y: positions[ id + 1 ], z: positions[ id + 2 ] })
  }
  var nbTriangles = indices.length / 3;
  for( var i = 0; i < nbTriangles; i++ ){
    var id = i * 3,
        pta = points[ indices[ id ] ],
        ptb = points[ indices[ id + 1 ] ],
        ptc = points[ indices[ id + 2 ] ],
        AtoB = distanceVector( pta, ptb ),
        BtoC = distanceVector( ptb, ptc ),
        CtoA = distanceVector( ptc, pta ),
        a2d = {x:0,y:0},
        b2d = {x:0,y:AtoB},
        intersecToC = intersection( a2d.x, a2d.y, CtoA, b2d.x, b2d.y, BtoC ),
        c2d = {x:intersecToC[ 0 ],y: intersecToC[ 2 ], xprime: intersecToC[ 1 ], yprime: intersecToC[ 3 ]},
        angleA = getAngleBetweenTwoTouchingLineSegments(a2d, b2d, c2d),
        angleB = getAngleBetweenTwoTouchingLineSegments(b2d, c2d, a2d),
        angleC = getAngleBetweenTwoTouchingLineSegments(c2d, a2d, b2d),
        triangle =  { ptA: pta,
                      ptB: ptb,
                      ptC: ptc,
                      AtoB: AtoB,
                      BtoC: BtoC,
                      CtoA: CtoA,
                      angleA: angleA,
                      angleB: angleB,
                      angleC: angleC,
                      neighbours: {ab:"none",bc:"none",ca:"none"},
                      idx: i
                    };
    triangles.push(  triangle )
  }
  for( var i2 = 0; i2 < nbTriangles; i2++ ){
    var triangle = triangles[ i2 ];
    for( var j = 0; j < nbTriangles; j++ ){
      if( j === i2 ) continue;
      var testedTriangle = triangles[ j ],
          matchA = compareVec3( triangle.ptA, testedTriangle.ptA ) || compareVec3( triangle.ptA, testedTriangle.ptB ) || compareVec3( triangle.ptA, testedTriangle.ptC ) || false,
          matchB = compareVec3( triangle.ptB, testedTriangle.ptA ) || compareVec3( triangle.ptB, testedTriangle.ptB ) || compareVec3( triangle.ptB, testedTriangle.ptC ) || false,
          matchC = compareVec3( triangle.ptC, testedTriangle.ptA ) || compareVec3( triangle.ptC, testedTriangle.ptB ) || compareVec3( triangle.ptC, testedTriangle.ptC ) || false;
      if( matchA && matchB ){
        triangles[ i2 ].neighbours.ab = j;
      }else if( matchB && matchC ){
        triangles[ i2 ].neighbours.bc = j;
      }else if( matchC && matchA ){
        triangles[ i2 ].neighbours.ca = j;
      }

    }
  }
  init();
  /*

  var firstTri = triangles[ 0 ],
      point0 = points[ firstTri.indices[ 0 ] ],
      point1 = points[ firstTri.indices[ 1 ] ],
      point2 = points[ firstTri.indices[ 2 ] ],
      dist0 = distanceVector( point0, point1 ),
      dist1 = distanceVector( point1, point2 ),
      dist2 = distanceVector( point2, point0 ),
      p0 = { x: 0, y: 0 },
      p1 = { x: dist0, y: 0 },
      intersec = intersection(p0.x, p0.y, dist2, p1.x, p1.y, dist1),
      p2 = { x: intersec[ 0 ], y: intersec[ 2 ] };
  point0.p2d = p0;
  point1.p2d = p1;
  point2.p2d = p2;

  renderList = [];
  for( var i = 0; i < nbTriangles; i++ ){
    if(renderList.indexOf( i ) < 0 ) renderList.push( i );
    listTriangles( triangles[ i ] )
  }
  var rl = renderList.length;
  for( var i = 0; i < rl; i++ ){
    var tr = triangles[ renderList[ i ] ],
        tIndices = tr.indices,
        p0 = points[ tIndices[ 0 ] ],
        p1 = points[ tIndices[ 1 ] ],
        p2 = points[ tIndices[ 2 ] ],
        dist0 = distanceVector( p0, p1 ),
        dist1 = distanceVector( p1, p2 ),
        dist2 = distanceVector( p2, p0 ),
        hasp2d0 = p0.hasOwnProperty( "p2d" ),
        hasp2d1 = p1.hasOwnProperty( "p2d" ),
        hasp2d2 = p2.hasOwnProperty( "p2d" );
      if( hasp2d0 && hasp2d1 && hasp2d2 ) continue;
      if( hasp2d0 && hasp2d1 && !hasp2d2){
        var intersec = intersection(p0.x, p0.y, dist2, p1.x, p1.y, dist1)
        p2.p2d = { x: intersec[ 0 ], y: intersec[ 2 ] };
      }else if( hasp2d1 && hasp2d2 && !hasp2d0){
        var intersec = intersection(p1.x, p1.y, dist0, p2.x, p2.y, dist2)
        p0.p2d = { x: intersec[ 0 ], y: intersec[ 2 ] };
      }else if( hasp2d2 && hasp2d0 && !hasp2d1){
        var intersec = intersection(p0.x, p0.y, dist0, p2.x, p2.y, dist1)
        p1.p2d = { x: intersec[ 0 ], y: intersec[ 2 ] };
      }else{
        p0.p2d = {x: 0, y: 0};
        p1.p2d = {x: dist0, y: 0};
        var intersect = intersection(p0.p2d.x, p0.p2d.y, dist2, p1.p2d.x, p1.p2d.x, dist1);
        p2.p2d = {x: intersect[ 0 ], y: intersect[ 2 ] };
      }
  }
  var canvas = document.body.appendChild( document.createElement( "canvas" ) ),
      ctx = canvas.getContext( "2d" );
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  ctx.translate(canvas.width/2, canvas.height / 2);
  for( var i = 0; i < rl; i++ ){
    var tria = triangles[ i ],
        indcs = tria.indices,
        p0 = points[ indcs[ 0 ] ].p2d,
        p1 = points[ indcs[ 1 ] ].p2d,
        p2 = points[ indcs[ 2 ] ].p2d;
    ctx.beginPath();
    ctx.moveTo(p0.x,p0.y);
    ctx.lineTo(p1.x,p1.y);
    ctx.lineTo(p2.x,p2.y);
    ctx.closePath();
    ctx.stroke();
  }
  alert(renderList.length+", "+nbTriangles)
  */
}
var init = function(){
  var canvas = document.body.appendChild( document.createElement( "canvas" ) ),
      ctx = canvas.getContext( "2d" ),
      toolBox = document.body.appendChild( document.createElement( "div" ) ),
      prev = toolBox.appendChild( document.createElement( "button" ) ),
      next = toolBox.appendChild( document.createElement( "button" ) ),
      valid = toolBox.appendChild( document.createElement( "button" ) );
  prev.textContent = "<";
  next.textContent = ">"
  valid.textContent = "ok";
  toolBox.id = "toolBox";
  canvas.id = "canvas";
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  prev.addEventListener( "click", clicPrev, false );
  next.addEventListener( "click", clicNext, false );
  valid.addEventListener( "click", clicValid, false );

}
var listTriangles = function( triangle ){
  var neighb = triangle.neighbours;
  for(var n=0; n<3;n++){
    var ngbIdx = neighb[ n ];
    if( ngbIdx === "" ) continue;
    if(renderList.indexOf( ngbIdx ) < 0 ){
      renderList.push( ngbIdx );
      listTriangles( triangles[ ngbIdx ] )
    }
  }
}
var clicPrev = function(e){
  triangleIndex += -1;
  if( triangleIndex < 0 ) triangleIndex = triangles.length - 1;
  update();
};
var clicNext = function(e){
  triangleIndex++;
  if( triangleIndex > triangles.length - 1 ) triangleIndex = 0;
  update();
};
var clicValid = function(e){
  drawAll();
};
var drawAll = function(){
  renderList = [];
  var canvas = document.getElementById( "canvas" ),
      ctx = canvas.getContext( "2d" );
  ctx.restore();
  ctx.save();
  ctx.clearRect( 0,0, canvas.width, canvas.height );
  ctx.translate( canvas.width / 2, canvas.height / 2 );
  var l = triangles.length;

  for( var i = 0; i < 1; i++ ){
  prepareForRender( triangles[ i ] );
  }
  for( var i = 0; i < l; i++ ){
    draw( triangles[ i ] );
  }
};
var draw = function( triangle ){
  var canvas = document.getElementById( "canvas" ),
      ctx = canvas.getContext( "2d" ),
      a2d = triangle.a2d,
      b2d = triangle.b2d,
      c2d = triangle.c2d;

  ctx.beginPath();
  ctx.moveTo( a2d.x, a2d.y );
  ctx.lineTo( b2d.x, b2d.y );
  ctx.lineTo( c2d.x, c2d.y );
  ctx.closePath();
  ctx.stroke();
}

var prepareForRender = function( triangle ){
  if( renderList.indexOf( triangle.idx ) > -1 ) return false;
  var a2d,
      b2d,
      c2d;
  if( !triangle.a2d && triangle.b2d && triangle.c2d ){
    b2d = triangle.b2d;
    c2d = triangle.c2d;
    var intersecToC = intersection( c2d.x, c2d.y, triangle.CtoA, b2d.x, b2d.y, triangle.AtoB );
    a2d = { x: intersecToC[ 0 ], y: intersecToC[ 2 ], xprime: intersecToC[ 1 ], yprime: intersecToC[ 3 ] };
  }else if( triangle.a2d && !triangle.b2d && triangle.c2d ){
    a2d = triangle.a2d;
    c2d = triangle.c2d;
    var intersecToC = intersection( a2d.x, a2d.y, triangle.AtoB, c2d.x, c2d.y, triangle.AtoB );
    b2d = { x: intersecToC[ 0 ], y: intersecToC[ 2 ], xprime: intersecToC[ 1 ], yprime: intersecToC[ 3 ] };
  }else if( triangle.a2d && triangle.b2d && !triangle.c2d ){
    a2d = triangle.a2d;
    b2d = triangle.b2d;
    var intersecToC = intersection( a2d.x, a2d.y, triangle.CtoA, b2d.x, b2d.y, triangle.BtoC );
    c2d = { x: intersecToC[ 0 ], y: intersecToC[ 2 ], xprime: intersecToC[ 1 ], yprime: intersecToC[ 3 ] };
  }else if( triangle.a2d && triangle.b2d && triangle.c2d ){
    renderList.push( triangle );
    return false;
  }else{
    a2d = { x: 0,y: 0 };
    b2d = { x: 0, y: triangle.AtoB };
    var intersecToC = intersection( a2d.x, a2d.y, triangle.CtoA, b2d.x, b2d.y, triangle.BtoC );
    c2d = { x: intersecToC[ 0 ], y: intersecToC[ 2 ], xprime: intersecToC[ 1 ], yprime: intersecToC[ 3 ] };
  }
  triangle.a2d = a2d;
  triangle.b2d = b2d;
  triangle.c2d = c2d;
  renderList.push( triangle );
  for( var k in triangle.neighbours ){
    var neighbourIdx = triangle.neighbours[ k ];
    if( neighbourIdx == "none" ) continue;
    var neighbour = triangles[ neighbourIdx ],
        thirdPoint = false,
        pts2d = k == "ab" ? {a2d:a2d,b2d:b2d,c2d:c2d} : k == "bc" ? {a2d:b2d,b2d:c2d,c2d:a2d} : {a2d:c2d,b2d:a2d,c2d:b2d};
    for( var l in neighbour.neighbours ){
      var neighbourIdx2 = neighbour.neighbours[ l ];
      if( neighbourIdx2 == "none" ) continue;
      var searchedNeighbour = triangles[ neighbourIdx2 ];
      if( searchedNeighbour == triangle ){
        var search;
        if( l == "ab" ){
          search = intersection(pts2d.a2d.x, pts2d.a2d.y, neighbour.CtoA, pts2d.b2d.x, pts2d.b2d.y, neighbour.BtoC );
          triangles[ neighbourIdx2 ].c2d = { x: search[ 0 ], xprime:search[ 1 ], y: search[ 2 ], yprime: search[ 3  ] };
        }else if( l == "bc" ){
          search = intersection(pts2d.a2d.x, pts2d.a2d.y, neighbour.AtoB, pts2d.b2d.x, pts2d.b2d.y, neighbour.CtoA );
          triangles[ neighbourIdx2 ].a2d = { x: search[ 0 ], xprime:search[ 1 ], y: search[ 2 ], yprime: search[ 3  ] };
        }else if( l == "ca" ){
          search = intersection(pts2d.a2d.x, pts2d.a2d.y, neighbour.BtoC, pts2d.b2d.x, pts2d.b2d.y, neighbour.AtoB );
          triangles[ neighbourIdx2 ].b2d = { x: search[ 0 ], xprime:search[ 1 ], y: search[ 2 ], yprime: search[ 3  ] };
        }
        thirdPoint = { x: search[ 0 ], xprime:search[ 1 ], y: search[ 2 ], yprime: search[ 3  ] }
        break;
      }

    }

      prepareForRender( neighbour );
  }
}
var update = function(){
  var canvas = document.getElementById( "canvas" ),
      ctx = canvas.getContext( "2d" );

  var triangle = triangles[ triangleIndex ],
      a2d = { x: 0,y: 0 },
      b2d = { x: 0, y: triangle.AtoB },
      intersecToC = intersection( a2d.x, a2d.y, triangle.CtoA, b2d.x, b2d.y, triangle.BtoC ),
      c2d = { x: intersecToC[ 0 ], y: intersecToC[ 2 ], xprime: intersecToC[ 1 ], yprime: intersecToC[ 3 ] };
  ctx.restore();
  ctx.save();
  ctx.clearRect( 0,0, canvas.width, canvas.height );
  ctx.translate( canvas.width / 2, canvas.height / 2 );
  ctx.beginPath();
  ctx.moveTo( a2d.x, a2d.y );
  ctx.lineTo( b2d.x, b2d.y );
  ctx.lineTo( c2d.x, c2d.y );
  ctx.closePath();
  ctx.stroke();
  for( var k in triangle.neighbours ){
    var neighbourIdx = triangle.neighbours[ k ];
    if( neighbourIdx == "none" ) continue;
    var neighbour = triangles[ neighbourIdx ],
        thirdPoint = false,
        pts2d = k == "ab" ? {a2d:a2d,b2d:b2d,c2d:c2d} : k == "bc" ? {a2d:b2d,b2d:c2d,c2d:a2d} : {a2d:c2d,b2d:a2d,c2d:b2d};
    for( var l in neighbour.neighbours ){
      var neighbourIdx2 = neighbour.neighbours[ l ];
      if( neighbourIdx2 == "none" ) continue;
      var searchedNeighbour = triangles[ neighbourIdx2 ];
      if( searchedNeighbour == triangle ){
        var search;
        if( l == "ab" ){
          search = intersection(pts2d.a2d.x, pts2d.a2d.y, neighbour.CtoA, pts2d.b2d.x, pts2d.b2d.y, neighbour.BtoC );
        }else if( l == "bc" ){
          search = intersection(pts2d.a2d.x, pts2d.a2d.y, neighbour.AtoB, pts2d.b2d.x, pts2d.b2d.y, neighbour.CtoA );
        }else if( l == "ca" ){
          search = intersection(pts2d.a2d.x, pts2d.a2d.y, neighbour.BtoC, pts2d.b2d.x, pts2d.b2d.y, neighbour.AtoB );
        }
        thirdPoint = { x: search[ 0 ], xprime:search[ 1 ], y: search[ 2 ], yprime: search[ 3  ] }
        break;
      }
    }

    ctx.beginPath();
    ctx.moveTo( pts2d.a2d.x, pts2d.a2d.y );
    ctx.lineTo( pts2d.b2d.x, pts2d.b2d.y );
    ctx.lineTo( thirdPoint.xprime, thirdPoint.yprime );
    ctx.closePath();
    ctx.stroke();
  //  break;
  }

}
var getTri = function ( i ) {
  var p = positions,
      idx = i * 3;
  return { x: p[ indices[ idx ] ], y: p[ indices[ idx + 1 ] ], z: p[ indices[ idx + 2] ] }
};
function distanceVector( v1, v2 ){
    var dx = v1.x - v2.x;
    var dy = v1.y - v2.y;
    var dz = v1.z - v2.z;

    return Math.sqrt( dx * dx + dy * dy + dz * dz );
};
function intersection(x0, y0, r0, x1, y1, r1) {
        var a, dx, dy, d, h, rx, ry;
        var x2, y2;

        /* dx and dy are the vertical and horizontal distances between
         * the circle centers.
         */
        dx = x1 - x0;
        dy = y1 - y0;

        /* Determine the straight-line distance between the centers. */
        d = Math.sqrt((dy*dy) + (dx*dx));

        /* Check for solvability. */
        if (d > (r0 + r1)) {
            /* no solution. circles do not intersect. */
            return false;
        }
        if (d < Math.abs(r0 - r1)) {
            /* no solution. one circle is contained in the other */
            return false;
        }

        /* 'point 2' is the point where the line through the circle
         * intersection points crosses the line between the circle
         * centers.
         */

        /* Determine the distance from point 0 to point 2. */
        a = ((r0*r0) - (r1*r1) + (d*d)) / (2.0 * d) ;

        /* Determine the coordinates of point 2. */
        x2 = x0 + (dx * a/d);
        y2 = y0 + (dy * a/d);

        /* Determine the distance from point 2 to either of the
         * intersection points.
         */
        h = Math.sqrt((r0*r0) - (a*a));

        /* Now determine the offsets of the intersection points from
         * point 2.
         */
        rx = -dy * (h/d);
        ry = dx * (h/d);

        /* Determine the absolute intersection points. */
        var xi = x2 + rx;
        var xi_prime = x2 - rx;
        var yi = y2 + ry;
        var yi_prime = y2 - ry;

        return [xi, xi_prime, yi, yi_prime];
    }
    function pythagSquared(point1, point2) {
    	return Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2);
    }

    function pythag(point1, point2) {
    	return Math.sqrt(pythagSquared(point1, point2));
    }

    function getAngleBetweenTwoTouchingLineSegments(touchPoint, line1EndPoint, line2EndPoint) {
    	var line2EndPointVector = {x: line2EndPoint.x - touchPoint.x, y: line2EndPoint.y - touchPoint.y},
    		line1EndPointVector = {x: line1EndPoint.x - touchPoint.x, y: line1EndPoint.y - touchPoint.y},
    		aSq = pythagSquared(line1EndPoint, line2EndPoint),
    		b = pythag(line2EndPoint, touchPoint),
    		c = pythag(line1EndPoint, touchPoint),
    		crossProduct = line2EndPointVector.x * line1EndPointVector.y - line1EndPointVector.x * line2EndPointVector.y;

    	return (crossProduct < 0 ? -1 : 1) * Math.acos((b * b + c * c  - aSq) / (2 * b * c)); // cosine rule
    }
